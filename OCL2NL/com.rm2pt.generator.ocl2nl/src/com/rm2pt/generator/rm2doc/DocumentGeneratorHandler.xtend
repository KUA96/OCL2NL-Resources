/*
 * RM2PT Generator Runtime
 * generated by RM2PT v1.3.0
 */
package com.rm2pt.generator.rm2doc

import com.google.inject.Inject
import com.google.inject.Provider
import org.eclipse.core.commands.AbstractHandler
import org.eclipse.core.commands.ExecutionEvent
import org.eclipse.core.commands.ExecutionException
import org.eclipse.core.commands.IHandler
import org.eclipse.core.resources.IFile
import org.eclipse.core.runtime.CoreException
import org.eclipse.core.runtime.NullProgressMonitor
import org.eclipse.emf.common.util.URI
import org.eclipse.jface.text.TextSelection
import org.eclipse.jface.viewers.IStructuredSelection
import org.eclipse.ui.handlers.HandlerUtil
import org.eclipse.xtext.builder.EclipseResourceFileSystemAccess2
import org.eclipse.xtext.generator.GeneratorContext
import org.eclipse.xtext.ui.resource.IResourceSetProvider
import org.eclipse.sirius.common.tools.api.resource.ImageFileFormat
import org.eclipse.sirius.ui.business.api.dialect.ExportFormat
import org.eclipse.sirius.business.api.session.SessionManager
import org.eclipse.sirius.business.api.dialect.DialectManager
import org.eclipse.sirius.ui.business.api.dialect.DialectUIManager
import org.eclipse.sirius.ui.business.api.dialect.ExportFormat.ExportDocumentFormat
import org.eclipse.sirius.viewpoint.DRepresentation
import org.eclipse.core.runtime.Path
import java.util.ArrayList
import com.rm2pt.generator.rm2doc.service.RM2DocString

class DocumentGeneratorHandler extends AbstractHandler implements IHandler {

	@Inject
	DocumentGenerator generator;

	@Inject
	Provider<EclipseResourceFileSystemAccess2> fileAccessProvider;

	@Inject
	IResourceSetProvider resourceSetProvider;

	var ArrayList<String> imageNameList
	var String imagePath

	override execute(ExecutionEvent event) throws ExecutionException {

		var selection = HandlerUtil.getCurrentSelection(event);

		// select requirement model file			 
		if (selection instanceof IStructuredSelection) {

			var structuredSelection = selection as IStructuredSelection;

			var firstElement = structuredSelection.getFirstElement();

			if (firstElement instanceof IFile) {
				firstElement.generate
//				println("111");
			}
		// select requirement model file editor					                
		} else if (selection instanceof TextSelection) {
			var activeEditor = HandlerUtil.getActiveEditor(event);
			val file = activeEditor.editorInput.getAdapter(IFile)
			file.generate
			
		}
		return null;
	}

	def generate(IFile file) {
//		println("222");
		// file belonged project
		var project = file.getProject();
		var iPath = file.getLocation()
		generator.setFilePath(iPath)
		// check whether have doc-gen folder, if not, create this folder
		var docGenFolder = project.getFolder(RM2DocString.DOCGEN)
		if (!docGenFolder.exists()) {
			try {
				docGenFolder.create(true, true, new NullProgressMonitor());
			} catch (CoreException e) {
//				println("555");
				return null;
			}
		}
		var imageFolder = docGenFolder.getFolder(RM2DocString.IMAGES)
		if (!imageFolder.exists()) {
			try {
				imageFolder.create(true, true, new NullProgressMonitor());
			} catch (CoreException e) {
//				println("333");
				return null;
			}
		}
		
		imagePath = imageFolder.getRawLocation().toOSString();
//		println(imagePath);
		// generate file steam 
		val EclipseResourceFileSystemAccess2 fsa = fileAccessProvider.get();
		fsa.project = project
		fsa.outputPath = RM2DocString.DOCGEN
		fsa.monitor = new NullProgressMonitor()

		// get source file resource 
		val uri = URI.createPlatformResourceURI(file.getFullPath().toString(), true);
		var rs = resourceSetProvider.get(project);
		var r = rs.getResource(uri, true);
		imageNameList = generator.getImageNameList(r)
		println(imageNameList)
		generator.doGenerate(r, fsa, new GeneratorContext());
//		println("sss");
		file.exportImageFromRemodel
	}

	override isEnabled() {
		return true;
	}

	def exportImageFromRemodel(IFile file) {
		val xtextFileFullPath = file.parent.fullPath + "/" + file.name.replace(".remodel", ".aird")
		val xtextUri = URI.createPlatformResourceURI(xtextFileFullPath, true)

		var s = SessionManager.INSTANCE.getSession(xtextUri, new NullProgressMonitor());

//		println("sss");
		var rds = DialectManager.INSTANCE.getAllLoadedRepresentations(s);

		var dialectUIManager = DialectUIManager.INSTANCE;
//		var exportFormat = new ExportFormat();
		val format = new ExportFormat(ExportDocumentFormat.NONE, ImageFileFormat.SVG);
//		val pathPre = file.parent.getRawLocation().toOSString();
		for (DRepresentation rd : rds) {
			if (imageNameList.contains(rd.name)) 
//			if(rd.name.equals("ProcessSaleSSD")){
//				
//			}else
			{
				val path = imagePath + "/" + RM2DocString.imageFileName(rd.name)
				
				
				dialectUIManager.export(rd, s, new Path(path), format, new NullProgressMonitor())
				
				
			}
		}
	}
}
