package com.rm2pt.generator.rm2doc.utils;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;

public class FileUtils {

	public static String toNewPath(String s) {
		var i = s.lastIndexOf('/');
		var j = s.lastIndexOf('/', i - 1);
		var k = s.indexOf('.', i);
		return s.substring(0, j + 1) + "doc-gen/" + s.substring(i + 1, k) + ".remodel";
	}

	public static void writeFile(String filePath, HashMap<String, ArrayList<String>> defMap,
			HashMap<String, ArrayList<String>> preMap, HashMap<String, ArrayList<String>> postMap,HashMap<String, String> sumMap) {
		File file = new File(filePath);// 待读取文件,表示在项目根目录下
		File newfile = new File(toNewPath(filePath));// 待写入文件
		try {
			if (newfile.exists()) {
				newfile.delete();
			}
			newfile.createNewFile();
			BufferedReader br = new BufferedReader(new FileReader(file));
			BufferedWriter bw = new BufferedWriter(new FileWriter(newfile, true));
			String tempString, trimString, key = null;
			int contFlag = 0, commentFlag = 0, outcommentFlag = 0;
			while ((tempString = br.readLine()) != null) {
				trimString = tempString.trim();
				if (trimString.startsWith("//")) {
					bw.write(tempString + "\r\n");
					continue;
				}
				if(contFlag == 0&&trimString.endsWith("Generated by RM2Doc")) {
					outcommentFlag=1;
				}
				if(outcommentFlag==1) {
					
					if(trimString.equals("*/")){
						outcommentFlag=0;
						continue;
					}
					if (outcommentFlag == 1) {
						continue;
					}
					
				}
				
				if (trimString.startsWith("Contract")) {
					key = contract2OpName(trimString);
					contFlag = 1;
					if (sumMap.containsKey(key)) {
						bw.write("/* Generated by RM2Doc\r\n");
						
						bw.write(capitTheString(sumMap.get(key)) + "\r\n");
						
						bw.write("*/\r\n");
					}
				}
				if (contFlag == 1) {
					if (trimString.equals("definition:")) {
						// 写入defNl
						if (defMap.containsKey(key)) {
							bw.write("/*\r\nGenerated by RM2Doc - Definition\r\n");
							for (String s : defMap.get(key)) {
								bw.write(capitTheString(s) + "\r\n");
							}
							bw.write("*/\r\n");
						}
					}
					if (trimString.equals("precondition:")) {
						// 加入preNl
						if (preMap.containsKey(key)) {
							bw.write("/*\r\nGenerated by RM2Doc - Precondition\r\n");

							for (String s : preMap.get(key)) {
								bw.write(capitTheString(s) + "\r\n");
							}
							bw.write("*/\r\n");
						}
					}
					if (trimString.equals("postcondition:")) {
						// 加入postNl
						if (postMap.containsKey(key)) {
							bw.write("/*\r\nGenerated by RM2Doc - Postcondition\r\n");

							for (String s : postMap.get(key)) {
								bw.write(capitTheString(s) + "\r\n");
							}
							bw.write("*/\r\n");
						}
					}
					if (trimString.startsWith("/*")) {
						commentFlag = 1;
					}
					if (trimString.endsWith("*/")) {
						commentFlag = 0;
						continue;
					}
					if (commentFlag == 1) {
						continue;
					}
					if (trimString.equals("}")) {
						contFlag = 0;
					}
				}
				bw.write(tempString + "\r\n");
			}
			br.close();
			bw.flush();
			bw.close();
			file.delete();
			file.createNewFile();
			br = new BufferedReader(new FileReader(newfile));
			bw = new BufferedWriter(new FileWriter(file, true));
			while ((tempString = br.readLine()) != null) {
				bw.write(tempString + "\r\n");
			}
			br.close();
			bw.flush();
			bw.close();

		} catch (IOException e) {
			e.printStackTrace();
		}
		newfile.delete();
	}

	public static void getContract(String path, HashMap<String, String> contMap) {
		File file = new File(path);
		BufferedReader reader = null;
		try {
			reader = new BufferedReader(new FileReader(file));
			String tempString = null, trimString, contString = "", key = "";
			int contFlag = 0;
			while ((tempString = reader.readLine()) != null) {
				if (tempString.equals("")) {
					continue;
				}
				trimString = tempString.trim();

				if (trimString.startsWith("Contract")) {
					key = contract2OpName(trimString);
					contFlag = 1;
					contString = trimString;
					continue;
				}
				if (contFlag == 1) {

					if (trimString.equals("}")) {
						contString = contString + "\r\n" + trimString;
						contMap.put(key, contString);
						contFlag = 0;
					} else {
						contString = contString + "\r\n" + tempString;
					}
				}
			}
			reader.close();
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			if (reader != null) {
				try {
					reader.close();
				} catch (IOException e1) {
				}
			}
		}
//		System.out.println(preMap);
//		System.out.println(postMap);
	}

	public static String contract2OpName(String s) {
		int a = s.indexOf(':');
		int b = s.indexOf('(');
		return s.substring(a + 2, b);
	}

	public static String capitTheString(String str) {
		// name = name.substring(0, 1).toUpperCase() + name.substring(1);
//		        return  name;
		if (str.startsWith("the ")) {
			char[] cs = str.toCharArray();
			cs[0] -= 32;
			return String.valueOf(cs);
		} else {
			return str;
		}

	}

	public static String capitString(String str) {

		char[] cs = str.toCharArray();
		cs[0] -= 32;
		return String.valueOf(cs);
	}

}
