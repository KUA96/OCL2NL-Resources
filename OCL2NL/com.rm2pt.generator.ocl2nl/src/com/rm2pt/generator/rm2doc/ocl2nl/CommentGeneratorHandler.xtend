/*
 * RM2PT Generator Runtime
 * generated by RM2PT v1.3.0
 */
package com.rm2pt.generator.rm2doc.ocl2nl

import com.google.inject.Inject
import org.eclipse.core.commands.AbstractHandler
import org.eclipse.core.commands.ExecutionEvent
import org.eclipse.core.commands.ExecutionException
import org.eclipse.core.commands.IHandler
import org.eclipse.core.resources.IFile
import org.eclipse.emf.common.util.URI
import org.eclipse.jface.text.TextSelection
import org.eclipse.jface.viewers.IStructuredSelection
import org.eclipse.ui.handlers.HandlerUtil
import org.eclipse.xtext.ui.resource.IResourceSetProvider

class CommentGeneratorHandler extends AbstractHandler implements IHandler {

	@Inject
	CommentGenerator generator;

	

	@Inject
	IResourceSetProvider resourceSetProvider;

	override execute(ExecutionEvent event) throws ExecutionException {

		var selection = HandlerUtil.getCurrentSelection(event);

		// select requirement model file			 
		if (selection instanceof IStructuredSelection) {

			var structuredSelection = selection as IStructuredSelection;

			var firstElement = structuredSelection.getFirstElement();

			if (firstElement instanceof IFile)
				firstElement.generate
		// select requirement model file editor					                
		} else if (selection instanceof TextSelection) {
			var activeEditor = HandlerUtil.getActiveEditor(event);
			val file = activeEditor.editorInput.getAdapter(IFile)
			file.generate
		}
		return null;
	}

	def generate(IFile file) {

		// file belonged project
		var project = file.getProject();
		var iPath = file.getLocation()						
		// get source file resource 
		val uri = URI.createPlatformResourceURI(file.getFullPath().toString(), true);
		var rs = resourceSetProvider.get(project);
		var r = rs.getResource(uri, true);
		generator.setFilePath(iPath)
		generator.doGenerate(r);
	}

	override isEnabled() {
		return true;
	}
}
