/*
 * RM2PT Generator Runtime
 * generated by RM2PT v1.3.0
 */
package com.rm2pt.generator.rm2doc

import java.util.ArrayList
import java.util.HashMap
import net.mydreamy.requirementmodel.rEMODEL.RequirementModel
import org.eclipse.core.runtime.IPath
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import com.rm2pt.generator.rm2doc.Model2Doc
import net.mydreamy.requirementmodel.rEMODEL.Interaction
import com.rm2pt.generator.rm2doc.utils.FileUtils
import com.rm2pt.generator.rm2doc.service.RM2DocString
import com.rm2pt.generator.rm2doc.service.LinkOcl2Nl
import com.rm2pt.generator.rm2doc.service.ToLink

class DocumentGenerator extends AbstractGenerator {
	var static filePath = ""

	def void setFilePath(IPath iPath) {
		filePath = iPath.toString()
//		println(filePath)
	}

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		//生成文档		
		for (r : resource.allContents.toIterable.filter(typeof(RequirementModel))) {
			fsa.generateFile("RequirementDocument.md", Model2Doc.generateDoc(r))
		}
	}
	def getImageNameList(Resource resource){
		var imageNameList = new ArrayList
		imageNameList.add(RM2DocString.UseCaseDiagram)
		imageNameList.add(RM2DocString.ConceptualClassDiagram)
		for (inter : resource.allContents.toIterable.filter(typeof(Interaction))) {
			imageNameList.add(inter.name)
		}
		return imageNameList
	}
	def static generateOperation(RequirementModel r) {
		var linkOcl2Nl = new LinkOcl2Nl
		linkOcl2Nl.defineList(r)
		linkOcl2Nl.defineLink()
		var defNlMap = new HashMap<String, ArrayList<String>>
		var preNlMap = new HashMap<String, ArrayList<String>>
		var postNlMap = new HashMap<String, ArrayList<String>>
		for (con : r.useCaseModel.contract) {
			linkOcl2Nl.defineService(con.service.name)
			if (con.def !== null) {
				defNlMap.put(con.op.name, linkOcl2Nl.transDefinition(con.def))
			}
			preNlMap.put(con.op.name, linkOcl2Nl.translationPrecondition(con.pre))
			postNlMap.put(con.op.name, linkOcl2Nl.translationPostcondition(con.post))
		}
		var contMap = new HashMap<String, String>();
		FileUtils.getContract(filePath, contMap);
		var useCaseModel = r.useCaseModel
		var opId=1
		'''
			«FOR con : useCaseModel.contract»
				<b>OP«opId» - «var conOp = con.op»«var opName = conOp.name»«opName»</b>
				<table>
					<tr>
						<td><b>Operation Name:</b></td>
						<td>«ToLink.spanOP(opName)»</td>
					</tr>
					<tr>
						<td><b>Operation ID:</b></td>
						<td>OP«opId++»</td>
					</tr>
					<tr>
						<td><b>Description:</b></td>
						<td> </td>
					</tr>
					<tr>
						<td><b>Service:</b></td>
						<td>«ToLink.linkService(con.service.name)»</td>
					</tr>
					<tr>
						<td><b>Input:</b></td>
				<td>«IF !conOp.parameter.isEmpty()»«FOR i :0.. conOp.parameter.size()-1»<p>«IF conOp.parameter.size()!=1»«i+1». «ENDIF»name: «ToLink.toItalic(conOp.parameter.get(i).name)», type: «Model2Doc.compileType(conOp.parameter.get(i).type)»</p>«ENDFOR»«ELSEIF conOp.parameter.isEmpty()»None«ENDIF»</td>
				</tr>
				<tr>
					<td><b>Output Type:</b></td>
					<td>«Model2Doc.compileType(conOp.returnType)»</td>
				</tr>
				«IF defNlMap.containsKey(opName)»<tr>
							<td><b>Definition:</b></td>
				<td>«FOR i:0..defNlMap.get(opName).size()-1»<p>«IF defNlMap.get(opName).size()!==1»«i+1». «ENDIF»«FileUtils.capitTheString(defNlMap.get(opName).get(i))»</p>«ENDFOR»</td>
					</tr>«ENDIF»
					<tr>
				<td><b>Preconditions:</b></td>
						<td>«IF preNlMap.containsKey(opName)»«FOR i:0..preNlMap.get(opName).size()-1»<p>«IF preNlMap.get(opName).size()!==1»«i+1». «ENDIF»«FileUtils.capitTheString(preNlMap.get(opName).get(i))»</p>«ENDFOR»«ENDIF»</td>
				</tr>
					<tr>
						<td><b>Postconditions:</b></td>
					<td>«IF postNlMap.containsKey(opName)»«FOR i:0..postNlMap.get(opName).size()-1»<p>«IF postNlMap.get(opName).size()!==1»«i+1». «ENDIF»«FileUtils.capitTheString(postNlMap.get(opName).get(i))»</p>«ENDFOR»«ENDIF»</td>
					</tr>
				</table>
				 
				<p>Contract of <b>«opName»</b>:</p>
				 
				```java
				«contMap.get(opName)»
				```
				
			«ENDFOR»	
		'''
	}

}
